/******************************************************************************
	main.c

	BCA
******************************************************************************/

#include "usps_bb_api.h"
#include "ProjectConfig.h"
#include "Backlight.h"
#include "dotstar.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <time.h>

#include <alsa/asoundlib.h>

#define ALSA_ERROR(result) do {\
		if(result)\
			printf("%s:%s:%d: ALSA %s\n",__FILE__,__FUNCTION__,__LINE__,snd_strerror(result));\
	} while(0)

typedef void (*usps_bb_wrapper)(int argc,const char * argv[]);

//	WRAPPER_(	command,			function)
#define WRAPPER_LIST \
	WRAPPER_( "api1"				,wrapper1					)\
	WRAPPER_( "api2"				,wrapper2					)\
	WRAPPER_( "backlight"			,wrapperBacklight			)\
	WRAPPER_( "backlightBlink"		,wrapperBacklightBlink		)\
	WRAPPER_( "backlightPulseGS"	,wrapperBacklightPulseGS	)\
	WRAPPER_( "backlightPulse"		,wrapperBacklightPulse		)\
	WRAPPER_( "dotstar"				,wrapperDotstar				)\
//Comment terminates list macro. Do not delete.

//Ouput command function prototypes.
#define WRAPPER_(command, function) void function(int argc,const char *argv[]);
	WRAPPER_LIST
#undef WRAPPER_

typedef struct {
	char			*name;
	usps_bb_wrapper	wrapper;
} usps_bb_command;

//Ouput command function lookup table.
static const usps_bb_command  gCommands[]=
{
#define WRAPPER_(command, function) {command, function},
	WRAPPER_LIST
#undef WRAPPER_
	{ NULL, NULL }
};

#define kSampleRate	16000
#define kBufferSize	1024
#define kPeriodSize	1024

snd_pcm_t *				gPlayback=NULL;
short					gPlaybackBuffer[kBufferSize];
snd_async_handler_t *	gPlaybackHandler=NULL;
snd_pcm_t *				gCapture=NULL;
short					gCaptureBuffer[kBufferSize];
snd_async_handler_t *	gCaptureHandler=NULL;

void initialize_audio(void);
void done_audio(void);

void playback_callback(snd_async_handler_t *handler);
void capture_callback(snd_async_handler_t *handler);

/******************************************************************************
  main

******************************************************************************/

int main(
	int argc,
	const char * argv[])
{
	int i;
	const usps_bb_command * command=gCommands;
	clock_t start,current;

	printf("argc=%d\n",argc);
	for(i=0;i<argc;i++)
		printf("argv[%d]=%s\n",i,argv[i]);

	initialize_audio();

	if(argc>1) {
		for(i=0;command->name!=NULL;i++,command++) {
			if(strcmp(argv[1],command->name)==0) {
				if(command->wrapper!=NULL)
				{
					printf("Testing: %s\n", command->name);
					(command->wrapper)(argc,argv);
				}
				else
				{
					printf("no wrapper for '%s'\n",command->name);
				}
			}
		}
	}

	start=clock();	// microseconds
	do {
		current=clock();
	} while(current - start < 10*USEC_PER_SECOND);

	done_audio();

	return 0;
}

/******************************************************************************
	wrapper1

******************************************************************************/

void wrapper1(
	int argc,
	const char * argv[])
{
}

/******************************************************************************
	wrapper2

******************************************************************************/

void wrapper2(
	int argc,
	const char * argv[])
{
}

/******************************************************************************
	wrapperBacklight

******************************************************************************/

void wrapperBacklight(
	int argc,
	const char * argv[])
{
	BacklightErrEnum		err;

	err = SetBrightness(BACKLIGHT_BRIGHTNESS_MAX, BACKLIGHT_BRIGHTNESS_MIN, false);
	if (BacklightNoErr != err)
	{
		printf("SetBrightness: %s\n", BacklightErrDesc(err));
	}
	else
	{
		err = SetGrayscale(BACKLIGHT_GRAYSCALE_MAX, BACKLIGHT_GRAYSCALE_MIN, true);
		if (BacklightNoErr != err)
		{
			printf("SetGrayscale: %s\n", BacklightErrDesc(err));
		}
	}
}

/******************************************************************************
	wrapperBacklightBlink

******************************************************************************/

void wrapperBacklightBlink(
	int argc,
	const char * argv[])
{
	BacklightErrEnum	err;
	uint32_t			onMS = 1 * MSECS_PER_SECOND;
	uint32_t			offMS = 1 * MSECS_PER_SECOND;
	int					blinkCount = 3;

	if (argc > 2)
	{
		onMS = atoi(argv[2]);
		if (argc > 3)
		{
			offMS = atoi(argv[3]);
			if (argc > 4)
			{
				blinkCount = atoi(argv[4]);
			}
		}
	}
	err = BacklightBlink( BACKLIGHT_BRIGHTNESS_MAX, BACKLIGHT_GRAYSCALE_MAX, 
							onMS, offMS, blinkCount);
	if (BacklightNoErr != err)
	{
		printf("Backlight blink: %s\n", BacklightErrDesc(err));
	}
}


/*******************************************************************************/
void wrapperBacklightPulse(
	int argc,
	const char * argv[])
{
	BacklightErrEnum	err;
	int					i;
	int					durationMS = 1000;

	if (argc > 2)
	{
		durationMS = atoi(argv[2]);
	}

	for (i = 0; i < 5; i++)
	{
		err = BacklightAnimateBrightness(BACKLIGHT_BRIGHTNESS_MIN, BACKLIGHT_BRIGHTNESS_MAX, 
			durationMS / 2);
		if (BacklightNoErr != err)
		{
			printf("Fade brightness: %s\n", BacklightErrDesc(err));
			break;
		}
		err = BacklightAnimateBrightness(BACKLIGHT_BRIGHTNESS_MAX, BACKLIGHT_BRIGHTNESS_MIN, 
			durationMS - (durationMS / 2));
		if (BacklightNoErr != err)
		{
			printf("Fade brightness: %s\n", BacklightErrDesc(err));
			break;
		}
	}
}

/*******************************************************************************/
void wrapperBacklightPulseGS(
	int argc,
	const char * argv[])
{
	BacklightErrEnum	err;
	int					i;
	int					durationMS = 1000;

	if (argc > 2)
	{
		durationMS = atoi(argv[2]);
	}

	for (i = 0; i < 5; i++)
	{
		err = BacklightAnimateGrayscale(BACKLIGHT_GRAYSCALE_MIN, BACKLIGHT_GRAYSCALE_MAX, 
			durationMS / 2);
		if (BacklightNoErr != err)
		{
			printf("Fade grayscale: %s\n", BacklightErrDesc(err));
			break;
		}
		err = BacklightAnimateGrayscale(BACKLIGHT_GRAYSCALE_MAX, BACKLIGHT_GRAYSCALE_MIN, 
			durationMS - (durationMS / 2));
		if (BacklightNoErr != err)
		{
			printf("Fade grayscale: %s\n", BacklightErrDesc(err));
			break;
		}
	}
}

/******************************************************************************
	wrapperDotstar

******************************************************************************/

void wrapperDotstar(
	int argc,
	const char * argv[])
{
	const int cNumLEDs=240;
	const int cCenter=5;
	int test=0;
	int i;
	struct timespec tim;
	tim.tv_sec=0;
	tim.tv_nsec=1000*10000;

	if(argc>2)
		test=atoi(argv[2]);
	printf("dotstar test=%d\n",test);

	dotstar_create("/dev/spidev1.0",8000000,cNumLEDs);

	dotstar_set_strip(0,0,0,0);

	for(i=0;i<cCenter;i++)
		dotstar_strip_push_pixel_front(255,255,0,15);

	dotstar_show();

	while(1) {
		switch(test) {
			case 0:
          			for (i = 0; i < 256; i+=2) {
                			dotstar_set_strip(0, 0, i, 15);
                			dotstar_show();
                			nanosleep(&tim, NULL);
            			}
            			for (i = 255; i > 0; i-=2) {
               				dotstar_set_strip(0, 0, i, 15);
                			dotstar_show();
               				nanosleep(&tim, NULL);
           			}
				break;
			case 1:
           			for (i = 0; i < cNumLEDs-cCenter; i++) {
           				dotstar_strip_rotate_right();
               				dotstar_show();
                			nanosleep(&tim, NULL);
            			}
            			for (i = 0; i < cNumLEDs-cCenter; i++) {
                			dotstar_strip_rotate_left();
                			dotstar_show();
                			nanosleep(&tim, NULL); }
				break;
			default:
				break;
		}
	}

	dotstar_destroy();
}

/******************************************************************************
	playback_callback

******************************************************************************/

void playback_callback(
	snd_async_handler_t *handler)
{
	void *data=snd_async_handler_get_callback_private(handler);
	int fd=snd_async_handler_get_fd(handler);
	int signo=snd_async_handler_get_signo(handler);

	snd_pcm_sframes_t available=snd_pcm_avail_update(gPlayback);
	while(available>kPeriodSize) {
		int result=snd_pcm_writei(gPlayback,gPlaybackBuffer,kPeriodSize);
		available=snd_pcm_avail_update(gPlayback);
	}
}

/******************************************************************************
	capture_callback

******************************************************************************/

void capture_callback(
	snd_async_handler_t *handler)
{
}

/******************************************************************************
	initialize_audio

******************************************************************************/

void initialize_audio()
{
	int result,card=-1;
	unsigned sampleRate=kSampleRate,bufferSize=kBufferSize,periodSize=kPeriodSize;
	snd_pcm_hw_params_t *playbackParameters,*captureParameters;

	printf("ALSA version=%s\n",snd_asoundlib_version());

	while(1) {
		char *name,*device;
		void **hints,**h;

		result=snd_card_next(&card);
		if(card== -1) break;
		ALSA_ERROR(result);
		result=snd_card_get_name(card,&name);
		ALSA_ERROR(result);
		printf("card %d: '%s'\n",card,name);

		result=snd_device_name_hint(card,"pcm",&hints);
		ALSA_ERROR(result);

		h=hints;
		while(h!=NULL && *h!=NULL) {
			device=snd_device_name_get_hint(*h++,"NAME");
			printf("card %d: device '%s'\n",card,(device!=NULL)?device:"?");
			free(device);
		}

		result=snd_device_name_free_hint(hints);
		ALSA_ERROR(result);

		free(name);
	}
#if 0
	result=snd_pcm_open(&gPlayback,"name",SND_PCM_STREAM_PLAYBACK,SND_PCM_ASYNC);
	ALSA_ERROR(result);

	result=snd_pcm_hw_parameters(&playbackParameters);
	result=snd_pcm_hw_params_any(gPlayback,playbackParameters);
	result=snd_pcm_hw_params_set_access(gPlayback,playbackParameters,SND_PCM_ACCESS_RW_INTERLEAVED);
	result=snd_pcm_hw_params_set_format(gPlayback,playbackParameters,SND_PCM_FORMAT_S16_LE);
	result=snd_pcm_hw_params_set_rate_near(gPlayback,playbackParameters,&sampleRate,NULL);
	result=snd_pcm_hw_params_set_channels(gPlayback,playbackParameters,1);
	result=snd_pcm_hw_params_set_buffer_size_near(gPlayback,playbackParameters,&bufferSize);
	result=snd_pcm_hw_params_set_period_size_near(gPlayback,playbackParameters,&periodSize);
	result=snd_pcm_hw_params(gPlayback,playbackParameters);
	result=snd_pcm_hw_params_free(playbackParameters);
	
	result=snd_pcm_prepare(gPlayback);

	result=snd_pcm_writei(gPlayback,gPlaybackBuffer,bufferSize);

	result=snd_pcm_add_pcm_handler(&gPlaybackHandler,gPlayback,playback_callback,NULL);

	result=snd_pcm_start(gPlaybackHandler);
#endif

	float data=sinf(2.0f*M_PI);
} 

/******************************************************************************
	done_audio

******************************************************************************/

void done_audio()
{
#if 0
	int result=snd_async_del_handler(gPlaybackHandler);
	gPlaybackHandler=NULL;

	result=snd_pcm_close(gPlayback);
	gPlayback=NULL;
#endif
}


