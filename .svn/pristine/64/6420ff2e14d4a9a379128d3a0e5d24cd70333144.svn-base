//======================================================================
/*!
@file Backlight.c
Implements control of the backlight LEDs.

@copyright (c) 2016, Bay Computer Associates.<br>
All rights reserved.<br>
This file contains CONFIDENTIAL material.<br>
Bay Computer Associates and forbids duplication of
this material with out express written permission
from Bay Computer Associates.

@author John Heaney<br>
Bay Computer Associates, Inc.<br>
136 Frances Ave.<br>
Cranston, RI 02910<br>
Tel. (401) 461-1484

Repository URL:		$HeadURL:  $
Last changed by:	$Author: jheaney $
Last changed on:	$Date:  $
Revision:			$Rev:  $
*/

//API implementation includes.
#include <linux/types.h>
#include <stdbool.h>
#include <unistd.h>
#include <time.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <linux/spi/spidev.h>
#include "Backlight.h"
#include "STREAM_macros.h"

#define ANIMATION_INC_MS 17


//////////////////////////////////////////////////
#define SHIFT_REGISTER_LENGTH_BITS 224
#define SHIFT_REGISTER_LENGTH_BYTES (SHIFT_REGISTER_LENGTH_BITS / 8)

#define FIELD_TO_TX_BUFFER(type, value) \
	TYPE_ENDIAN_TO_STREAM_ITERATOR(type, BE_, tx, iterator, value)


//======================================================================
//! Private variables.
static BacklightBrightness gBrightness1 = BACKLIGHT_BRIGHTNESS_DEFAULT;
static BacklightBrightness gBrightness2 = BACKLIGHT_BRIGHTNESS_DEFAULT;
static BacklightGrayscale gGrayscale1 = BACKLIGHT_GRAYSCALE_DEFAULT;
static BacklightGrayscale gGrayscale2 = BACKLIGHT_GRAYSCALE_DEFAULT;

static const char *device = "/dev/spidev2.0";
static uint8_t mode;
static uint8_t bits = 8;
static uint32_t speed = 500000;
static uint16_t delay;

static uint8_t tx[SHIFT_REGISTER_LENGTH_BYTES];

static const char * backlightErrDescs[BacklightErrCOUNT] = 
{
#define BACKLIGHT_ERROR_(enumTag, description) description,
	BACKLIGHT_ERROR_LIST
#undef BACKLIGHT_ERROR_
};

//======================================================================
//! Private prototypes.
static void BacklightFillTX(void);

//======================================================================
/*!
@brief	Set the brightness levels and optionally update the LEDs.
@details
The brightness levels are 7 bits, which give 128 levels of brightness control.
This is combined with grayscale value, resulting in the actual brightness of
an LED. There are two LEDs, so the brightness values should be set simultaneously
for both panels. The values are cached so they can be accessed and provided as
input to this function if one should remain the same.

Since the brightness and grayscale are set by different functions, updating the
actual LEDs is optional.

@return		NONE.
@param	evt	Pointer to EventEnum variable to receive the event.

@author	John Heaney
@see	EVT_QUEUE_SIZE
@test	11/03/2014 Unit Test: UNTESTED
*/
BacklightErrEnum SetBrightness(BacklightBrightness led1, BacklightBrightness led2, bool update)
{
	BacklightErrEnum	result;

	result = BacklightNoErr;

	if (led1 > BACKLIGHT_BRIGHTNESS_MAX)
		gBrightness1 = BACKLIGHT_BRIGHTNESS_MAX;
	else
		gBrightness1 = led1;

	if (led2 > BACKLIGHT_BRIGHTNESS_MAX)
		gBrightness2 = BACKLIGHT_BRIGHTNESS_MAX;
	else
		gBrightness2 = led2;

	if (update)
	{
		result = BacklightUpdateLEDs();
	}
	return result;
}

BacklightErrEnum SetGrayscale(BacklightGrayscale led1, BacklightGrayscale led2, bool update)
{
	BacklightErrEnum	result;

	result = BacklightNoErr;

	gGrayscale1 = led1;
	gGrayscale2 = led2;
	if (update)
	{
		result = BacklightUpdateLEDs();
	}
	return result;
}

BacklightBrightness	GetBrightness1(void)
{
	return gBrightness1;
}

BacklightBrightness	GetBrightness2(void)
{
	return gBrightness2;
}

BacklightGrayscale	GetGrayscale1(void)
{
	return gGrayscale1;
}

BacklightGrayscale	GetGrayscale2(void)
{
	return gGrayscale2;
}


static void BacklightFillTX(void)
{
	uint32_t	command;
	int			iterator;

	//SPI transmits in both directions, so this buffer captures whatever comes back.
	// We don't care about it. It will be ignored.
	uint8_t rx[ARRAY_SIZE(tx)];

	//The first 32 bits include the command to write, flags and global brightness.
	SHIFT_BITS_FROM_RIGHT(command	,0x25			,6);	//Write command code.
	SHIFT_BITS_FROM_RIGHT(command	,0x01			,1);	//OUTTMG 
	SHIFT_BITS_FROM_RIGHT(command	,0x00			,1);	//EXTGCK
	SHIFT_BITS_FROM_RIGHT(command	,0x01			,1);	//TMGRST
	SHIFT_BITS_FROM_RIGHT(command	,0x01			,1);	//DSPRPT 
	SHIFT_BITS_FROM_RIGHT(command	,0x00			,1);	//BLANK 
	SHIFT_BITS_FROM_RIGHT(command	,0x00			,7);	//Blue brightness unused.
	SHIFT_BITS_FROM_RIGHT(command	,gBrightness2	,7);	//Green brightness
	SHIFT_BITS_FROM_RIGHT(command	,gBrightness1	,7);	//Red brightness

	//Build up the transmit buffer from the start.
	iterator = 0;
	FIELD_TO_TX_BUFFER(UINT32_, command);
	FIELD_TO_TX_BUFFER(UINT16_, 0); //OUTB3
	FIELD_TO_TX_BUFFER(UINT16_, 0); //OUTG3
	FIELD_TO_TX_BUFFER(UINT16_, 0); //OUTR3
	FIELD_TO_TX_BUFFER(UINT16_, 0); //OUTB2
	FIELD_TO_TX_BUFFER(UINT16_, 0); //OUTG2
	FIELD_TO_TX_BUFFER(UINT16_, 0); //OUTR2
	FIELD_TO_TX_BUFFER(UINT16_, 0); //OUTB1
	FIELD_TO_TX_BUFFER(UINT16_, 0); //OUTG1
	FIELD_TO_TX_BUFFER(UINT16_, 0); //OUTR1
	FIELD_TO_TX_BUFFER(UINT16_, 0); //OUTB0
	FIELD_TO_TX_BUFFER(UINT16_, gGrayscale2); //OUTG0
	FIELD_TO_TX_BUFFER(UINT16_, gGrayscale1); //OUTR0
}

BacklightErrEnum BacklightUpdateLEDs(void)
{
	int					ret;
	int					fd;
	BacklightErrEnum	result;

	result = BacklightNoErr;

	//SPI transmits in both directions, so this buffer captures whatever comes back.
	// We don't care about it. It will be ignored.
	uint8_t rx[ARRAY_SIZE(tx)];

	//Parameter ioctl block for the spi driver.
	struct spi_ioc_transfer tr = 
	{
		.tx_buf = (unsigned long)tx,
		.rx_buf = (unsigned long)rx,
		.len = ARRAY_SIZE(tx),
		.delay_usecs = delay,
		.speed_hz = speed,
		.bits_per_word = bits,
	};

	BacklightFillTX();

	fd = open(device, O_RDWR);
	if (fd < 0)
		return BacklightOpenErr;

	//Set spi mode.
	ret = ioctl(fd, SPI_IOC_WR_MODE, &mode);
	if (ret == -1)
	{
		result = BacklightSpiModeErr;
	}

	//Set bits per word.
	if (ret >= 0)
	{
		ret = ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, &bits);
		if (ret == -1)
		{
			result = BacklightSpiBitsErr;
		}
	}

	//Set max speed hz.
	if (ret >= 0)
	{
		ret = ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, &speed);
		if (ret == -1)
		{
			result = BacklightSpiSpeedErr;
		}
	}

	if (ret >= 0)
	{
		ret = ioctl(fd, SPI_IOC_MESSAGE(1), &tr);
		if (ret < 1)
		{
			result = BacklightSpiSendErr;
		}
	}

	close(fd);
	return result;
}

const char* BacklightErrDesc(BacklightErrEnum err)
{
	return backlightErrDescs[err];
}


BacklightErrEnum BacklightAnimateBrightness(
	BacklightBrightness start, 
	BacklightBrightness end, 
	uint32_t durationMS)
{
	int						i;
	int						steps;
	const struct timespec	timeDelay = {0, ANIMATION_INC_MS * NSEC_PER_MSECS};
	struct timespec			timeRemaining;
	BacklightBrightness		current;
	long					range;
	BacklightErrEnum		err;

	err = BacklightNoErr;
	range = end - start;
	steps = durationMS / ANIMATION_INC_MS;
	for	(i = 0; i < steps; i++)
	{
		current = start + ((i * range) / steps);

		err = SetBrightness(current, BACKLIGHT_BRIGHTNESS_MIN, true);
		if (BacklightNoErr != err)
		{
			break;
		}
		nanosleep(&timeDelay, &timeRemaining);
	}
	if (current != end)
		err = SetBrightness(end, BACKLIGHT_BRIGHTNESS_MIN, true);

	return err;
}

BacklightErrEnum BacklightAnimateGrayscale(BacklightGrayscale start, BacklightGrayscale end, uint32_t durationMS)
{
	int						i;
	int						steps;
	const struct timespec	timeDelay = {0, ANIMATION_INC_MS * NSEC_PER_MSECS};
	struct timespec			timeRemaining;
	BacklightGrayscale		current;
	long					range;
	BacklightErrEnum		err;

	err = BacklightNoErr;
	range = end - start;
	steps = durationMS / ANIMATION_INC_MS;
	for	(i = 0; i < steps; i++)
	{
		current = start + ((i * range) / steps);

		err = SetGrayscale(current, BACKLIGHT_GRAYSCALE_MIN, true);
		if (BacklightNoErr != err)
		{
			break;
		}
		nanosleep(&timeDelay, &timeRemaining);
	}
	if (current != end)
		err = SetGrayscale(end, BACKLIGHT_GRAYSCALE_MIN, true);

	return err;
}

BacklightErrEnum BacklightBlink(
	BacklightBrightness brightness, 
	BacklightGrayscale grayscale, 
	uint32_t onMS, uint32_t offMS, int blinkCount)
{
	BacklightErrEnum	err;
	int					iBlink;
	struct timespec		timeDelay = {0, 0};
	struct timespec		timeRemaining;

	//Set the grayscale to the on value and then blink using brightness.
	err = SetGrayscale(grayscale, BACKLIGHT_GRAYSCALE_MIN, false);

	err = SetBrightness(BACKLIGHT_BRIGHTNESS_MIN, BACKLIGHT_BRIGHTNESS_MIN, true);
	if (BacklightNoErr != err) return err;

	for (iBlink = 0; iBlink < blinkCount; iBlink++)
	{
		timeDelay.tv_sec = offMS / MSECS_PER_SECOND;
		timeDelay.tv_nsec = (offMS % MSECS_PER_SECOND) * NSEC_PER_MSECS;
		nanosleep(&timeDelay, &timeRemaining);

		err = SetBrightness(brightness, BACKLIGHT_BRIGHTNESS_MIN, true);
		if (BacklightNoErr != err) return err;

		timeDelay.tv_sec = offMS / MSECS_PER_SECOND;
		timeDelay.tv_nsec = (offMS % MSECS_PER_SECOND) * NSEC_PER_MSECS;
		nanosleep(&timeDelay, &timeRemaining);

		err = SetBrightness(BACKLIGHT_BRIGHTNESS_MIN, BACKLIGHT_BRIGHTNESS_MIN, true);
		if (BacklightNoErr != err) return err;
	}

	return err;
}
